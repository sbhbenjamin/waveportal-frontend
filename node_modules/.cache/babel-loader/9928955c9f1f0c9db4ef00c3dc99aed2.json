{"ast":null,"code":"import _toConsumableArray from\"/Users/ben/Documents/webdev/blockchain/waveportal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Users/ben/Documents/webdev/blockchain/waveportal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/ben/Documents/webdev/blockchain/waveportal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/ben/Documents/webdev/blockchain/waveportal/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{ethers}from'ethers';import'./App.css';import abi from'./utils/WavePortal.json';import'react-loader-spinner/dist/loader/css/react-spinner-loader.css';import Loader from'react-loader-spinner';export default function App(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),currentAccount=_useState2[0],setCurrentAccount=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),allWaves=_useState4[0],setAllWaves=_useState4[1];var _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),message=_useState6[0],setMessage=_useState6[1];var _useState7=useState(false),_useState8=_slicedToArray(_useState7,2),mining=_useState8[0],setMining=_useState8[1];var contractAddress=process.env.REACT_APP_CONTRACT_ADDRESS;var contractABI=abi.abi;var checkIfWalletIsConnected=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _window,ethereum,accounts,account;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;// make sure that we have access to window.ethereum\n_window=window,ethereum=_window.ethereum;if(!ethereum){console.log('Make sure you have metamask!');}else{console.log('We have the ethereum object',ethereum);}// check if we are authorised to access the user's wallet\n_context.next=5;return ethereum.request({method:'eth_accounts'});case 5:accounts=_context.sent;if(accounts.length!==0){account=accounts[0];console.log('Found an authorised account:',account);setCurrentAccount(account);getAllWaves();}else{console.log('No authorised account found');}_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.error(_context.t0);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function checkIfWalletIsConnected(){return _ref.apply(this,arguments);};}();var connectWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _window2,ethereum,accounts;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_window2=window,ethereum=_window2.ethereum;if(ethereum){_context2.next=5;break;}alert('Get MetaMask!');return _context2.abrupt(\"return\");case 5:_context2.next=7;return ethereum.request({method:'eth_requestAccounts'});case 7:accounts=_context2.sent;console.log('Connected',accounts[0]);setCurrentAccount(accounts[0]);_context2.next=15;break;case 12:_context2.prev=12;_context2.t0=_context2[\"catch\"](0);console.error(_context2.t0);case 15:case\"end\":return _context2.stop();}}},_callee2,null,[[0,12]]);}));return function connectWallet(){return _ref2.apply(this,arguments);};}();var wave=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var _window3,ethereum,provider,signer,wavePortalContract,count,waveTxn;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_window3=window,ethereum=_window3.ethereum;if(!ethereum){_context3.next=26;break;}// connects to the ethereum network\nprovider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();wavePortalContract=new ethers.Contract(contractAddress,contractABI,signer);_context3.next=8;return wavePortalContract.getTotalWaves();case 8:count=_context3.sent;console.log('Retrieved total wave count...',count.toNumber());// execute the actual wave from the smart contract\n_context3.next=12;return wavePortalContract.wave(message,{gasLimit:300000});case 12:waveTxn=_context3.sent;setMining(true);console.log('Mining...',waveTxn.hash);_context3.next=17;return waveTxn.wait();case 17:setMining(false);console.log('Mined -- ',waveTxn.hash);_context3.next=21;return wavePortalContract.getTotalWaves();case 21:count=_context3.sent;console.log('Retrieved total wave count...',count.toNumber());getAllWaves();_context3.next=27;break;case 26:console.log(\"Ethereum object doesn't exist!\");case 27:_context3.next=32;break;case 29:_context3.prev=29;_context3.t0=_context3[\"catch\"](0);console.error(_context3.t0);case 32:case\"end\":return _context3.stop();}}},_callee3,null,[[0,29]]);}));return function wave(){return _ref3.apply(this,arguments);};}();var getAllWaves=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var _window4,ethereum,provider,signer,wavePortalContract,waves,wavesCleaned;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.prev=0;_window4=window,ethereum=_window4.ethereum;if(!ethereum){_context4.next=13;break;}provider=new ethers.providers.Web3Provider(ethereum);signer=provider.getSigner();wavePortalContract=new ethers.Contract(contractAddress,contractABI,signer);// call the getAllWaves method from the smart contract\n_context4.next=8;return wavePortalContract.getAllWaves();case 8:waves=_context4.sent;wavesCleaned=waves.map(function(wave){return{address:wave.waver,timestamp:new Date(wave.timestamp*1000),message:wave.message};});setAllWaves(wavesCleaned);_context4.next=14;break;case 13:console.error(\"Ethereum object doesn't exist\");case 14:_context4.next=19;break;case 16:_context4.prev=16;_context4.t0=_context4[\"catch\"](0);console.error(_context4.t0);case 19:case\"end\":return _context4.stop();}}},_callee4,null,[[0,16]]);}));return function getAllWaves(){return _ref4.apply(this,arguments);};}();useEffect(function(){var wavePortalContract;var onNewWave=function onNewWave(from,timestamp,message){console.log('NewWave',from,timestamp,message);setAllWaves(function(prevState){return[].concat(_toConsumableArray(prevState),[{address:from,timestamp:new Date(timestamp*1000),message:message}]);});};if(window.ethereum){var provider=new ethers.providers.Web3Provider(window.ethereum);var signer=provider.getSigner();wavePortalContract=new ethers.Contract(contractAddress,contractABI,signer);wavePortalContract.on('NewWave',onNewWave);}return function(){if(wavePortalContract){wavePortalContract.off('NewWave',onNewWave);}};},[]);useEffect(function(){checkIfWalletIsConnected();},[]);return/*#__PURE__*/React.createElement(\"div\",{className:\"mainContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"dataContainer\"},/*#__PURE__*/React.createElement(\"div\",{className:\"header\"},\"\\uD83D\\uDC4B Hey there!\"),/*#__PURE__*/React.createElement(\"div\",{className:\"bio\"},\"I am \",/*#__PURE__*/React.createElement(\"strong\",null,\"Ben\"),\" and I am a CS student at the National University of Singapore. Connect your Ethereum wallet and wave at me! :)\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",value:message,onChange:function onChange(_ref5){var target=_ref5.target;return setMessage(target.value);},className:\"waveInput\"}),/*#__PURE__*/React.createElement(\"button\",{className:\"waveButton\",onClick:wave},\"Wave at Me\"),mining&&/*#__PURE__*/React.createElement(\"div\",{className:\"miningLoader\"},/*#__PURE__*/React.createElement(Loader,{type:\"TailSpin\",color:\"#ffde03\",height:30,width:30})),!currentAccount&&/*#__PURE__*/React.createElement(\"button\",{className:\"waveButton\",onClick:connectWallet},\"Connect Wallet\"),allWaves.map(function(wave,index){return/*#__PURE__*/React.createElement(\"div\",{key:index,style:{backgroundColor:'OldLace',marginTop:'16px',padding:'8px'}},/*#__PURE__*/React.createElement(\"div\",null,\"Address: \",wave.address),/*#__PURE__*/React.createElement(\"div\",null,\"Time: \",wave.timestamp.toString()),/*#__PURE__*/React.createElement(\"div\",null,\"Message: \",wave.message));})));}","map":{"version":3,"sources":["/Users/ben/Documents/webdev/blockchain/waveportal/frontend/src/App.js"],"names":["React","useState","useEffect","ethers","abi","Loader","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","mining","setMining","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","contractABI","checkIfWalletIsConnected","window","ethereum","console","log","request","method","accounts","length","account","getAllWaves","error","connectWallet","alert","wave","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getTotalWaves","count","toNumber","gasLimit","waveTxn","hash","wait","waves","wavesCleaned","map","address","waver","timestamp","Date","onNewWave","from","prevState","on","off","target","value","index","backgroundColor","marginTop","padding","toString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers'\nimport './App.css'\nimport abi from './utils/WavePortal.json'\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css'\nimport Loader from 'react-loader-spinner'\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState('')\n  const [allWaves, setAllWaves] = useState([])\n  const [message, setMessage] = useState('')\n  const [mining, setMining] = useState(false)\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS\n  const contractABI = abi.abi\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // make sure that we have access to window.ethereum\n      const { ethereum } = window\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!')\n      } else {\n        console.log('We have the ethereum object', ethereum)\n      }\n\n      // check if we are authorised to access the user's wallet\n      const accounts = await ethereum.request({ method: 'eth_accounts' })\n\n      if (accounts.length !== 0) {\n        const account = accounts[0]\n        console.log('Found an authorised account:', account)\n        setCurrentAccount(account)\n        getAllWaves()\n      } else {\n        console.log('No authorised account found')\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        alert('Get MetaMask!')\n        return\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n      console.log('Connected', accounts[0])\n      setCurrentAccount(accounts[0])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window\n\n      if (ethereum) {\n        // connects to the ethereum network\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        )\n\n        let count = await wavePortalContract.getTotalWaves()\n        console.log('Retrieved total wave count...', count.toNumber())\n\n        // execute the actual wave from the smart contract\n        const waveTxn = await wavePortalContract.wave(message, {\n          gasLimit: 300_000,\n        })\n        setMining(true)\n\n        console.log('Mining...', waveTxn.hash)\n\n        await waveTxn.wait()\n        setMining(false)\n        console.log('Mined -- ', waveTxn.hash)\n\n        count = await wavePortalContract.getTotalWaves()\n        console.log('Retrieved total wave count...', count.toNumber())\n        getAllWaves()\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        )\n        // call the getAllWaves method from the smart contract\n        const waves = await wavePortalContract.getAllWaves()\n\n        const wavesCleaned = waves.map((wave) => {\n          return {\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          }\n        })\n\n        setAllWaves(wavesCleaned)\n      } else {\n        console.error(\"Ethereum object doesn't exist\")\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  useEffect(() => {\n    let wavePortalContract\n\n    const onNewWave = (from, timestamp, message) => {\n      console.log('NewWave', from, timestamp, message)\n      setAllWaves((prevState) => [\n        ...prevState,\n        {\n          address: from,\n          timestamp: new Date(timestamp * 1000),\n          message: message,\n        },\n      ])\n    }\n\n    if (window.ethereum) {\n      const provider = new ethers.providers.Web3Provider(window.ethereum)\n      const signer = provider.getSigner()\n\n      wavePortalContract = new ethers.Contract(\n        contractAddress,\n        contractABI,\n        signer\n      )\n      wavePortalContract.on('NewWave', onNewWave)\n    }\n\n    return () => {\n      if (wavePortalContract) {\n        wavePortalContract.off('NewWave', onNewWave)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">👋 Hey there!</div>\n\n        <div className=\"bio\">\n          I am <strong>Ben</strong> and I am a CS student at the National\n          University of Singapore. Connect your Ethereum wallet and wave at me!\n          :)\n        </div>\n\n        <input\n          type=\"text\"\n          value={message}\n          onChange={({ target }) => setMessage(target.value)}\n          className=\"waveInput\"\n        />\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {mining && (\n          <div className=\"miningLoader\">\n            <Loader type=\"TailSpin\" color=\"#ffde03\" height={30} width={30} />\n          </div>\n        )}\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: 'OldLace',\n                marginTop: '16px',\n                padding: '8px',\n              }}\n            >\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}