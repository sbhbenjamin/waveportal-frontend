{"ast":null,"code":"var _jsxFileName = \"/Users/ben/Documents/webdev/blockchain/waveportal/frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport './App.css';\nimport abi from './utils/WavePortal.json';\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [allWaves, setAllWaves] = useState([]);\n  const [message, setMessage] = useState('');\n  const contractAddress = '0x3f2d4AdeE98AEaa6666acB9eF785e34e3593aC90';\n  const contractABI = abi.abi;\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // make sure that we have access to window.ethereum\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!');\n      } else {\n        console.log('We have the ethereum object', ethereum);\n      } // check if we are authorised to access the user's wallet\n\n\n      const accounts = await ethereum.request({\n        method: 'eth_accounts'\n      });\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log('Found an authorised account:', account);\n        setCurrentAccount(account);\n        getAllWaves();\n      } else {\n        console.log('No authorised account found');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const wave = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        // connects to the ethereum network\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        let count = await wavePortalContract.getTotalWaves();\n        console.log('Retrieved total wave count...', count.toNumber()); // execute the actual wave from the smart contract\n\n        const waveTxn = await wavePortalContract.wave(message);\n        console.log('Mining...', waveTxn.hash);\n        await waveTxn.wait();\n        console.log('Mined -- ', waveTxn.hash);\n        count = await wavePortalContract.getTotalWaves();\n        console.log('Retrieved total wave count...', count.toNumber());\n        getAllWaves();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const getAllWaves = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer); // call the getAllWaves method from the smart contract\n\n        const waves = await wavePortalContract.getAllWaves(); // exstract address, timestamp and message\n\n        let wavesCleaned = [];\n        waves.forEach(wave => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message\n          });\n        });\n        setAllWaves(wavesCleaned);\n      } else {\n        console.error(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mainContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dataContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }, \"\\uD83D\\uDC4B Hey there!\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bio\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"I am \", /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 16\n    }\n  }, \"Ben\"), \" and I am a CS student at the National University of Singapore. Connect your Ethereum wallet and wave at me! :)\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: message,\n    onChange: ({\n      target\n    }) => setMessage(target.value),\n    className: \"waveInput\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: wave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, \"Wave at Me\"), !currentAccount && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"waveButton\",\n    onClick: connectWallet,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"Connect Wallet\"), allWaves.map((wave, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        backgroundColor: 'OldLace',\n        marginTop: '16px',\n        padding: '8px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 15\n      }\n    }, \"Address: \", wave.address), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, \"Time: \", wave.timestamp.toString()), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }, \"Message: \", wave.message));\n  })));\n}","map":{"version":3,"sources":["/Users/ben/Documents/webdev/blockchain/waveportal/frontend/src/App.js"],"names":["React","useState","useEffect","ethers","abi","App","currentAccount","setCurrentAccount","allWaves","setAllWaves","message","setMessage","contractAddress","contractABI","checkIfWalletIsConnected","ethereum","window","console","log","accounts","request","method","length","account","getAllWaves","error","connectWallet","alert","wave","provider","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","count","getTotalWaves","toNumber","waveTxn","hash","wait","waves","wavesCleaned","forEach","push","address","waver","timestamp","Date","target","value","map","index","backgroundColor","marginTop","padding","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AAEA,eAAe,SAASC,GAAT,GAAe;AAC5B,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCN,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMW,eAAe,GAAG,4CAAxB;AACA,QAAMC,WAAW,GAAGT,GAAG,CAACA,GAAxB;;AAEA,QAAMU,wBAAwB,GAAG,YAAY;AAC3C,QAAI;AACF;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbE,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACD,OAFD,MAEO;AACLD,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CH,QAA3C;AACD,OARC,CAUF;;;AACA,YAAMI,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;;AAEA,UAAIF,QAAQ,CAACG,MAAT,KAAoB,CAAxB,EAA2B;AACzB,cAAMC,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CK,OAA5C;AACAhB,QAAAA,iBAAiB,CAACgB,OAAD,CAAjB;AACAC,QAAAA,WAAW;AACZ,OALD,MAKO;AACLP,QAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACD;AACF,KArBD,CAqBE,OAAOO,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACD;AACF,GAzBD;;AA2BA,QAAMC,aAAa,GAAG,YAAY;AAChC,QAAI;AACF,YAAM;AAAEX,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAI,CAACD,QAAL,EAAe;AACbY,QAAAA,KAAK,CAAC,eAAD,CAAL;AACA;AACD;;AAED,YAAMR,QAAQ,GAAG,MAAMJ,QAAQ,CAACK,OAAT,CAAiB;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAjB,CAAvB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAQ,CAAC,CAAD,CAAjC;AACAZ,MAAAA,iBAAiB,CAACY,QAAQ,CAAC,CAAD,CAAT,CAAjB;AACD,KAXD,CAWE,OAAOM,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACD;AACF,GAfD;;AAiBA,QAAMG,IAAI,GAAG,YAAY;AACvB,QAAI;AACF,YAAM;AAAEb,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAID,QAAJ,EAAc;AACZ;AACA,cAAMc,QAAQ,GAAG,IAAI1B,MAAM,CAAC2B,SAAP,CAAiBC,YAArB,CAAkChB,QAAlC,CAAjB;AACA,cAAMiB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,kBAAkB,GAAG,IAAI/B,MAAM,CAACgC,QAAX,CACzBvB,eADyB,EAEzBC,WAFyB,EAGzBmB,MAHyB,CAA3B;AAMA,YAAII,KAAK,GAAG,MAAMF,kBAAkB,CAACG,aAAnB,EAAlB;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CkB,KAAK,CAACE,QAAN,EAA7C,EAXY,CAaZ;;AACA,cAAMC,OAAO,GAAG,MAAML,kBAAkB,CAACN,IAAnB,CAAwBlB,OAAxB,CAAtB;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBqB,OAAO,CAACC,IAAjC;AAEA,cAAMD,OAAO,CAACE,IAAR,EAAN;AACAxB,QAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBqB,OAAO,CAACC,IAAjC;AAEAJ,QAAAA,KAAK,GAAG,MAAMF,kBAAkB,CAACG,aAAnB,EAAd;AACApB,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CkB,KAAK,CAACE,QAAN,EAA7C;AACAd,QAAAA,WAAW;AACZ,OAvBD,MAuBO;AACLP,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KA7BD,CA6BE,OAAOO,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACD;AACF,GAjCD;;AAmCA,QAAMD,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,YAAM;AAAET,QAAAA;AAAF,UAAeC,MAArB;;AAEA,UAAID,QAAJ,EAAc;AACZ,cAAMc,QAAQ,GAAG,IAAI1B,MAAM,CAAC2B,SAAP,CAAiBC,YAArB,CAAkChB,QAAlC,CAAjB;AACA,cAAMiB,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,kBAAkB,GAAG,IAAI/B,MAAM,CAACgC,QAAX,CACzBvB,eADyB,EAEzBC,WAFyB,EAGzBmB,MAHyB,CAA3B,CAHY,CASZ;;AACA,cAAMU,KAAK,GAAG,MAAMR,kBAAkB,CAACV,WAAnB,EAApB,CAVY,CAYZ;;AACA,YAAImB,YAAY,GAAG,EAAnB;AACAD,QAAAA,KAAK,CAACE,OAAN,CAAehB,IAAD,IAAU;AACtBe,UAAAA,YAAY,CAACE,IAAb,CAAkB;AAChBC,YAAAA,OAAO,EAAElB,IAAI,CAACmB,KADE;AAEhBC,YAAAA,SAAS,EAAE,IAAIC,IAAJ,CAASrB,IAAI,CAACoB,SAAL,GAAiB,IAA1B,CAFK;AAGhBtC,YAAAA,OAAO,EAAEkB,IAAI,CAAClB;AAHE,WAAlB;AAKD,SAND;AAOAD,QAAAA,WAAW,CAACkC,YAAD,CAAX;AACD,OAtBD,MAsBO;AACL1B,QAAAA,OAAO,CAACQ,KAAR,CAAc,+BAAd;AACD;AACF,KA5BD,CA4BE,OAAOA,KAAP,EAAc;AACdR,MAAAA,OAAO,CAACQ,KAAR,CAAcA,KAAd;AACD;AACF,GAhCD;;AAkCAvB,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,wBAAwB;AACzB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADF,eAGE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADP,oHAHF,eASE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAEJ,OAFT;AAGE,IAAA,QAAQ,EAAE,CAAC;AAAEwC,MAAAA;AAAF,KAAD,KAAgBvC,UAAU,CAACuC,MAAM,CAACC,KAAR,CAHtC;AAIE,IAAA,SAAS,EAAC,WAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,eAgBE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,OAAO,EAAEvB,IAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBF,EAoBG,CAACtB,cAAD,iBACC;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAA+B,IAAA,OAAO,EAAEoB,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBArBJ,EA0BGlB,QAAQ,CAAC4C,GAAT,CAAa,CAACxB,IAAD,EAAOyB,KAAP,KAAiB;AAC7B,wBACE;AACE,MAAA,GAAG,EAAEA,KADP;AAEE,MAAA,KAAK,EAAE;AACLC,QAAAA,eAAe,EAAE,SADZ;AAELC,QAAAA,SAAS,EAAE,MAFN;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAe5B,IAAI,CAACkB,OAApB,CARF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAYlB,IAAI,CAACoB,SAAL,CAAeS,QAAf,EAAZ,CATF,eAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAe7B,IAAI,CAAClB,OAApB,CAVF,CADF;AAcD,GAfA,CA1BH,CADF,CADF;AA+CD","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { ethers } from 'ethers'\nimport './App.css'\nimport abi from './utils/WavePortal.json'\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState('')\n  const [allWaves, setAllWaves] = useState([])\n  const [message, setMessage] = useState('')\n  const contractAddress = '0x3f2d4AdeE98AEaa6666acB9eF785e34e3593aC90'\n  const contractABI = abi.abi\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      // make sure that we have access to window.ethereum\n      const { ethereum } = window\n\n      if (!ethereum) {\n        console.log('Make sure you have metamask!')\n      } else {\n        console.log('We have the ethereum object', ethereum)\n      }\n\n      // check if we are authorised to access the user's wallet\n      const accounts = await ethereum.request({ method: 'eth_accounts' })\n\n      if (accounts.length !== 0) {\n        const account = accounts[0]\n        console.log('Found an authorised account:', account)\n        setCurrentAccount(account)\n        getAllWaves()\n      } else {\n        console.log('No authorised account found')\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window\n\n      if (!ethereum) {\n        alert('Get MetaMask!')\n        return\n      }\n\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' })\n      console.log('Connected', accounts[0])\n      setCurrentAccount(accounts[0])\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window\n\n      if (ethereum) {\n        // connects to the ethereum network\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        )\n\n        let count = await wavePortalContract.getTotalWaves()\n        console.log('Retrieved total wave count...', count.toNumber())\n\n        // execute the actual wave from the smart contract\n        const waveTxn = await wavePortalContract.wave(message)\n        console.log('Mining...', waveTxn.hash)\n\n        await waveTxn.wait()\n        console.log('Mined -- ', waveTxn.hash)\n\n        count = await wavePortalContract.getTotalWaves()\n        console.log('Retrieved total wave count...', count.toNumber())\n        getAllWaves()\n      } else {\n        console.log(\"Ethereum object doesn't exist!\")\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  const getAllWaves = async () => {\n    try {\n      const { ethereum } = window\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        const signer = provider.getSigner()\n        const wavePortalContract = new ethers.Contract(\n          contractAddress,\n          contractABI,\n          signer\n        )\n\n        // call the getAllWaves method from the smart contract\n        const waves = await wavePortalContract.getAllWaves()\n\n        // exstract address, timestamp and message\n        let wavesCleaned = []\n        waves.forEach((wave) => {\n          wavesCleaned.push({\n            address: wave.waver,\n            timestamp: new Date(wave.timestamp * 1000),\n            message: wave.message,\n          })\n        })\n        setAllWaves(wavesCleaned)\n      } else {\n        console.error(\"Ethereum object doesn't exist\")\n      }\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, [])\n\n  return (\n    <div className=\"mainContainer\">\n      <div className=\"dataContainer\">\n        <div className=\"header\">👋 Hey there!</div>\n\n        <div className=\"bio\">\n          I am <strong>Ben</strong> and I am a CS student at the National\n          University of Singapore. Connect your Ethereum wallet and wave at me!\n          :)\n        </div>\n\n        <input\n          type=\"text\"\n          value={message}\n          onChange={({ target }) => setMessage(target.value)}\n          className=\"waveInput\"\n        />\n\n        <button className=\"waveButton\" onClick={wave}>\n          Wave at Me\n        </button>\n\n        {!currentAccount && (\n          <button className=\"waveButton\" onClick={connectWallet}>\n            Connect Wallet\n          </button>\n        )}\n\n        {allWaves.map((wave, index) => {\n          return (\n            <div\n              key={index}\n              style={{\n                backgroundColor: 'OldLace',\n                marginTop: '16px',\n                padding: '8px',\n              }}\n            >\n              <div>Address: {wave.address}</div>\n              <div>Time: {wave.timestamp.toString()}</div>\n              <div>Message: {wave.message}</div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}